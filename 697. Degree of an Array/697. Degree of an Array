/*
https://leetcode.com/problems/degree-of-an-array/description/

Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

//the "map" is again usedQAQ, I'd better speed up my pace.



Time Complexity: O(N)
Space Complexity: O(N)

*/
#include <vector>
#include <unordered_map>
using std::vector;
using std::unordered_map;

class Solution {
public:
    int findShortestSubArray(vector<int>& nums) {
        unordered_map<int, vector<int>> mp;
        for(int i =0; i<nums.size(); i++)
            mp[nums[i]].push_back(i);//put the index of "n" into nums[n] 
        int degree = 0;
        for(auto it = mp.begin(); it!=mp.end(); it++)
            degree = max(degree, int(it->second.size()));
        int shortest = nums.size();
        for(auto it = mp.begin(); it!=mp.end(); it++)
        {
            if(it->second.size()==degree)
                shortest = min(shortest, it->second.back() - it->second[0]+1);
        }
        return shortest;
    }
};
