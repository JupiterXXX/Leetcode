/*
A string s of lowercase English letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.

Example 1:

Input: s = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits s into less parts.

Note:

s will have length in range [1, 500].
s will consist of lowercase English letters ('a' to 'z') only.
*/

/*Time: O(n)  Space: O(1)*/
/*
2 times scan, one for record the max_idx of each letter, and next for partition.
*/

class Solution {
public:
    vector<int> partitionLabels(string s) {
        vector<int> last_pos(26, 0);
        for(int i = 0; i < s.size(); i++){
            last_pos[s[i] - 'a'] = i;
        }
        vector<int> result;
        int max_idx = -1;
        int last_idx = 0;
        for(int i = 0; i < s.size(); i++){
            max_idx = max(max_idx, last_pos[s[i] - 'a']); //max idx of current scanned letters
            if(max_idx == i){// current i == max idx of current letters!
                //result.emplace(result.end(), max_idx - last_idx + 1);
                result.push_back(max_idx - last_idx + 1);
                last_idx = i+1;
            }
        }
        return result;
    }
};
