/*
https://leetcode.com/problems/find-the-duplicate-number/description/

Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.

Note:
You must not modify the array (assume the array is read only).
You must use only constant, O(1) extra space.
Your runtime complexity should be less than O(n2).
There is only one duplicate number in the array, but it could be repeated more than once.


//These requirements can be treated as added in an interview. At first, ideas such as sorting and set may come up with us. But these ideas may need extra space.

*/




class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int slow = nums[0];//I first begin "fast" and "slow" from 0, which is a mistake because "0" is not an element in nums.
        int fast = nums[0];
        while(1)
        {
            slow = nums[slow];
            fast = nums[nums[fast]];
            if(slow == fast)
                break;
        }
        fast = nums[0];
        while(slow != fast)
        {
            fast = nums[fast];
            slow = nums[slow];
        }
        return fast;
    }
};
