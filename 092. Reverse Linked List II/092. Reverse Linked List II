/*
https://leetcode.com/problems/reverse-linked-list-ii/description/

Reverse a linked list from position m to n. Do it in one-pass.
Note: 1 ≤ m ≤ n ≤ length of list.

Example:
Input: 1->2->3->4->5->NULL, m = 2, n = 4
Output: 1->4->3->2->5->NULL
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        ListNode* new_head = new ListNode(0);
        new_head->next = head;
        ListNode* pre = new_head;
        for(int i = 0; i < m-1; ++i){
            pre = pre->next;
        }
        ListNode* curr = pre->next;
        for (int i = 0; i < n - m; i++) {
            ListNode* pnext = curr->next; 
            curr->next = pnext->next;
            pnext->next = pre->next;
            pre->next = pnext;
        }
        return new_head->next;
    }
};
