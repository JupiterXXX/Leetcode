/*
Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.

Implement the LRUCache class:

LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
int get(int key) Return the value of the key if the key exists, otherwise return -1.
void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.
Follow up:
Could you do get and put in O(1) time complexity?


Example 1:

Input
["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, null, -1, 3, 4]

Explanation
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // cache is {1=1}
lRUCache.put(2, 2); // cache is {1=1, 2=2}
lRUCache.get(1);    // return 1
lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
lRUCache.get(2);    // returns -1 (not found)
lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
lRUCache.get(1);    // return -1 (not found)
lRUCache.get(3);    // return 3
lRUCache.get(4);    // return 4
 
Constraints:

1 <= capacity <= 3000
0 <= key <= 3000
0 <= value <= 104
At most 3 * 104 calls will be made to get and put.
*/


class LRUCache {
public:
    LRUCache(int capacity) {
        m_capacity = capacity;
    }
    
    int get(int key) {
        auto iter = m_map.find(key);
        if (iter == m_map.end()){
            return -1;
        }
        m_list.splice(m_list.begin(), m_list, iter->second);
        return iter->second->second;
    }
    
    void put(int key, int value) {
        auto iter = m_map.find(key);
        if (iter != m_map.end()){
            //order of the list nodes reflects the "least recently used"
            m_list.splice(m_list.begin(), m_list, iter->second); //move the updated node to the beginning
            iter->second->second = value;
            return;  //remind to return
        }
        if (m_map.size() == m_capacity){
            //need update map and list
            auto it = m_list.back();//back() returns the element, so use '.' if need back().first
            m_list.pop_back();
            m_map.erase(it.first);
        }
        m_list.emplace_front(key, value); //use {key, value} if use push_front.
        m_map[key] = m_list.begin();
        //m_map.insert({key, m_list.begin()});// make pair when insert to map
    }
private:
    size_t m_capacity;
    //m_map_iter->first: key, m_map_iter->second: list iterator;
    unordered_map<int,  list<pair<int, int>>::iterator> m_map; 
    //m_list_iter->first: key, m_list_iter->second: value;
    list<pair<int, int>> m_list;
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
