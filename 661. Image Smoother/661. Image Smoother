/*
https://leetcode.com/problems/image-smoother/description/

Given a 2D integer matrix M representing the gray scale of an image, you need to design a smoother to make the gray scale of each cell becomes the average gray scale (rounding down) of all the 8 surrounding cells and itself. If a cell has less than 8 surrounding cells, then use as many as you can.

//codes for this problem is highly like my codes of my own img-process projects.hahahahaha.
//I have tried refining codes of my own projects. I believe it better as I grow up.=w=



Time Complexity: O(N), where N is the number of pixels in our image. We iterate over every pixel.
Space Complexity: O(N), the size of our answer.

*/




#include <vector>
using std::vector;


class Solution {
public:
    vector<vector<int>> imageSmoother(vector<vector<int>>& M) {
        int row = M.size();
        int col = M[0].size();
        vector<vector<int>> ret(M);
        for(int i = 0; i < row; i++){
            for(int j = 0; j < col; j++)
            {
                int count = 0;
                int sum_surr = 0;
                for(int ii = i - 1; ii < i + 2; ii++)
                {
                    for(int jj = j - 1; jj < j + 2; jj++)
                    {
                        if(ii >=0 && ii<row && jj>=0 && jj<col)
                        {   
                            sum_surr += M[ii][jj];
                            count++;
                        }
                         
                    }
                }
                ret[i][j] = sum_surr / count;
            }
        }
        return ret;
    }
};
