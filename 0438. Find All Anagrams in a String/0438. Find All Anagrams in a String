/*
Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.

Example 1:

Input: s = "cbaebabacd", p = "abc"
Output: [0,6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input: s = "abab", p = "ab"
Output: [0,1,2]
Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".
 

Constraints:

1 <= s.length, p.length <= 3 * 104
s and p consist of lowercase English letters.
*/
/*
Complexity:
Time O(N)  Space O(1)

*/

class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        vector<int> p_record (26, 0);
        vector<int> temp (26, 0);
        vector<int> result;
        if(p.size()>s.size())
            return result;
        for(int i = 0; i < p.size(); i++){
            p_record[p[i]-'a']++;
            temp[s[i]-'a']++;
        }
        if(temp == p_record)
            result.push_back(0);
        for(int i = 0; i < (s.size()-p.size()); i++){
            temp[s[i+p.size()]-'a']++;
            temp[s[i]-'a']--;
            if(temp == p_record)
                result.push_back(i+1);
        }
        return result;
    }
};
